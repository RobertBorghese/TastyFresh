%YAML 1.2
---
file_extensions:
  - tasty
name: Tasty Fresh
scope: source.tasty-fresh
variables:
  identifier: '(?:(?:[[:alpha:]][_[:alnum:]]*|_[_[:alnum:]]+)\b)'
contexts:
  prototype:
    - include: comments
    - include: module_attributes

  main:
    - include: operators

    - match: '"'
      scope: punctuation.definition.string.begin.tasty-fresh
      push: double_quoted_string

    - match: '//'
      scope: punctuation.definition.comment.tasty-fresh
      push: line_comment

    - match: '/\*'
      scope: punctuation.definition.comment.tasty-fresh
      push: line_comment

    - match: '(?<!fn)\s*(?!constructor|super|this)([a-zA-Z_](?:[a-zA-Z0-9_]+|::|\.|\->)+[a-zA-Z0-9_])\s*(?=\()'
      scope: meta.function.tasty-fresh
      captures:
        1: entity.name.function.tasty-fresh

    - match: '(fn)\s+({{identifier}})'
      scope: meta.function.tasty-fresh
      captures:
        1: storage.type.function.tasty-fresh
        2: entity.name.function.tasty-fresh

    - match: '(\@{{identifier}})'
      scope: variable.parameter.tasty-fresh

    - match: '[a-zA-Z0-9_]+(\@[^\(\)\s]+)'
      scope: meta.template.tasty-fresh
      captures:
        1: keyword.operator.tasty-fresh

    - match: '[a-zA-Z0-9_]+(\@\([^\)]+\))'
      scope: meta.template.tasty-fresh
      captures:
        1: keyword.operator.tasty-fresh

    - match: '\b(if|else|for|while|do|inc|dec|in|from|to|by
    )\b'
      scope: keyword.control.tasty-fresh

    - match: \breturn\b
      scope: keyword.control.tasty-fresh

    - match: '\b(let|copy|borrow|ref|move|ptr|autoptr|uniqueptr|ptr2|ptr3|ptr4|ptr5|ptr6|ptr7|ptr8|ptr9)\b'
      scope: storage.type.tasty-fresh

    - match: '(?<=let|copy|borrow|ref|move|ptr|autoptr|uniqueptr|ptr2|ptr3|ptr4|ptr5|ptr6|ptr7|ptr8|ptr9)\s+({{identifier}})'
      scope: entity.name.function.tasty-fresh

    - match: '\b(static|inline|extern|virtual|meta)\b'
      scope: storage.type.tasty-fresh

    - match: '\b(const|constexpr|constinit|extern|mutable|forever|thread_local|volatile)\b'
      scope: storage.type.tasty-fresh

    - match: '\b(fn|op|constructor|destructor)\b'
      scope: storage.type.function.tasty-fresh

    - match: '(class|abstract|enum)\s+({{identifier}})'
      scope: meta.assume.tasty-fresh
      captures:
        1: storage.type.class.tasty-fresh
        2: entity.name.class.tasty-fresh

    - match: '(attribute)\s+({{identifier}})(\()'
      scope: meta.assume.tasty-fresh
      captures:
        1: storage.type.class.tasty-fresh
        2: entity.name.class.tasty-fresh
        3: keyword.operator.tasty-fresh
      push:
        - match: '\)'
          scope: keyword.operator.tasty-fresh
          pop: true
        - match: ','
          scope: keyword.operator.tasty-fresh
        - match: '(?:\b[a-zA-Z0-9_]+\b|\[|\])'
          scope: variable.parameter.function.tasty-fresh

    - match: '(attribute)\s+({{identifier}})'
      scope: meta.assume.tasty-fresh
      captures:
        1: storage.type.class.tasty-fresh
        2: entity.name.class.tasty-fresh

    - match: '(?<=extends|and|becomes)\s+(([a-zA-Z_](?:[a-zA-Z0-9_]+|::|\.|\->)+[a-zA-Z0-9_]))'
      scope: entity.name.class.tasty-fresh

    - match: '\b(extends|becomes|and)\b'
      scope: storage.type.class.tasty-fresh

    - match: \b(super)\b
      scope: variable.language.super.js

    - match: \b(this)\b
      scope: variable.language.this.js

    - match: '\b(std)\b'
      scope: storage.type.namespace.tasty-fresh

    - match: '(assume)\s+({{identifier}})\s+(is)\s+(a)\s+(namespace|class|variable)'
      scope: meta.assume.tasty-fresh
      captures:
        1: storage.type.assume.tasty-fresh
        2: variable.parameter.tasty-fresh
        3: keyword.operator.tasty-fresh
        4: keyword.operator.tasty-fresh
        5: keyword.control.tasty-fresh

    - match: '(include|contain)\s+(system\s+|local\s+)?([a-zA-Z0-9_\.\/\\]+)'
      scope: meta.include.tasty-fresh
      captures:
        1: storage.type.include.tasty-fresh
        2: keyword.control.tasty-fresh
        3: variable.parameter.tasty-fresh

    - match: '(import)\s+([a-zA-Z0-9_\.\/\\]+)'
      scope: meta.import.tasty-fresh
      captures:
        1: storage.type.import.tasty-fresh
        2: variable.parameter.tasty-fresh

    - match: '\b(unsigned|bool|char|short|int|long|float|double|text)\b'
      scope: storage.type.numeric.tasty-fresh

    - match: '\b(-)?[0-9\.ful]+\b'
      scope: constant.numeric.tasty-fresh

    - match: '\b(true|false)\b'
      scope: constant.numeric.tasty-fresh

    - match: '\b(nullptr|null|none)\b'
      scope: constant.numeric.tasty-fresh

  operators:
    - match: '[!<>=]=|[<>\.]'
      scope: keyword.operator.comparison.tasty-fresh
    - match: '(?:[-+%/*^&|]|<<|>>)?='
      scope: keyword.operator.assignment.tasty-fresh
    - match: '&&|\|\||!'
      scope: keyword.operator.logical.tasty-fresh
    - match: '[-+%/*]'
      scope: keyword.operator.arithmetic.tasty-fresh
    - match: '[&|^]|<<|>>'
      scope: keyword.operator.bitwise.tasty-fresh
    - match: '[~?$#:'']'
      scope: keyword.operator.tasty-fresh
    - match: '[,\(\)\{\}]'
      scope: keyword.operator.tasty-fresh
    - match: '(?:new|delete|new\[\]|delete\[\])'
      scope: keyword.operator.tasty-fresh

  module_attributes:
    - match: '(%{{identifier}}%)'
      scope: keyword.control.tasty-fresh

  double_quoted_string:
    - meta_scope: string.quoted.double.tasty-fresh
    - match: '\\.'
      scope: constant.character.escape.tasty-fresh
    - match: '"'
      scope: punctuation.definition.string.end.tasty-fresh
      pop: true

  line_comment:
    - meta_scope: comment.line.tasty-fresh
    - match: $
      pop: true

  comments:
    - match: '/\*'
      scope: punctuation.definition.comment.tasty-fresh
      push: 
        - meta_scope: comment.block.tasty-fresh
        - match: '\*/'
          pop: true
    - match: '//[^\*]'
      scope: punctuation.definition.comment.tasty-fresh
      push:
        - meta_scope: comment.line.double-slash.tasty-fresh
        - match: $\n?
          pop: true
